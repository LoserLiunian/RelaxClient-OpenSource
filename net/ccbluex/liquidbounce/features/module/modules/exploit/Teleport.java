/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  org.lwjgl.input.Mouse
 *  org.lwjgl.opengl.GL11
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import net.ccbluex.liquidbounce.api.enums.MaterialType;
import net.ccbluex.liquidbounce.api.minecraft.block.state.IIBlockState;
import net.ccbluex.liquidbounce.api.minecraft.client.entity.IEntityPlayerSP;
import net.ccbluex.liquidbounce.api.minecraft.network.IPacket;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketEntityAction;
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayer;
import net.ccbluex.liquidbounce.api.minecraft.renderer.entity.IRenderManager;
import net.ccbluex.liquidbounce.api.minecraft.util.IMovingObjectPosition;
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos;
import net.ccbluex.liquidbounce.api.minecraft.util.WVec3;
import net.ccbluex.liquidbounce.event.EventTarget;
import net.ccbluex.liquidbounce.event.MoveEvent;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.event.Render3DEvent;
import net.ccbluex.liquidbounce.event.UpdateEvent;
import net.ccbluex.liquidbounce.features.module.Module;
import net.ccbluex.liquidbounce.features.module.ModuleCategory;
import net.ccbluex.liquidbounce.features.module.ModuleInfo;
import net.ccbluex.liquidbounce.utils.ClientUtils;
import net.ccbluex.liquidbounce.utils.MovementUtils;
import net.ccbluex.liquidbounce.utils.PathUtils;
import net.ccbluex.liquidbounce.utils.block.BlockUtils;
import net.ccbluex.liquidbounce.utils.render.RenderUtils;
import net.ccbluex.liquidbounce.utils.timer.TickTimer;
import net.ccbluex.liquidbounce.value.BoolValue;
import net.ccbluex.liquidbounce.value.ListValue;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

@ModuleInfo(name="Teleport", description="Allows you to teleport around.", category=ModuleCategory.EXPLOIT)
public class Teleport
extends Module {
    private final BoolValue ignoreNoCollision = new BoolValue("IgnoreNoCollision", true);
    private final ListValue modeValue = new ListValue("Mode", new String[]{"Blink", "Flag", "Rewinside", "OldRewinside", "Spoof", "Minesucht", "AAC3.5.0"}, "Blink");
    private final ListValue buttonValue = new ListValue("Button", new String[]{"Left", "Right", "Middle"}, "Middle");
    private final TickTimer flyTimer = new TickTimer();
    private boolean hadGround;
    private double fixedY;
    private final List<IPacket> packets = new ArrayList<IPacket>();
    private boolean disableLogger = false;
    private boolean zitter = false;
    private boolean doTeleport = false;
    private boolean freeze = false;
    private final TickTimer freezeTimer = new TickTimer();
    private int delay;
    private WBlockPos endPos;
    private IMovingObjectPosition objectPosition;

    @Override
    public void onEnable() {
        if (((String)this.modeValue.get()).equalsIgnoreCase("AAC3.5.0")) {
            ClientUtils.displayChatMessage("\u00a7c>>> \u00a7a\u00a7lTeleport \u00a7fAAC 3.5.0 \u00a7c<<<");
            ClientUtils.displayChatMessage("\u00a7cHow to teleport: \u00a7aPress " + (String)this.buttonValue.get() + " mouse button.");
            ClientUtils.displayChatMessage("\u00a7cHow to cancel teleport: \u00a7aDisable teleport module.");
        }
    }

    @Override
    public void onDisable() {
        this.fixedY = 0.0;
        this.delay = 0;
        mc.getTimer().setTimerSpeed(1.0f);
        this.endPos = null;
        this.hadGround = false;
        this.freeze = false;
        this.disableLogger = false;
        this.flyTimer.reset();
        this.packets.clear();
        super.onDisable();
    }

    @EventTarget
    public void onUpdate(UpdateEvent event) {
        int buttonIndex = Arrays.asList(this.buttonValue.getValues()).indexOf(this.buttonValue.get());
        IEntityPlayerSP thePlayer = mc.getThePlayer();
        if (thePlayer == null) {
            return;
        }
        if (((String)this.modeValue.get()).equals("AAC3.5.0")) {
            this.freezeTimer.update();
            if (this.freeze && this.freezeTimer.hasTimePassed(40)) {
                this.freezeTimer.reset();
                this.freeze = false;
                this.setState(false);
            }
            if (!this.flyTimer.hasTimePassed(60)) {
                this.flyTimer.update();
                if (thePlayer.getOnGround()) {
                    thePlayer.jump();
                } else {
                    MovementUtils.forward(this.zitter ? -0.21 : 0.21);
                    this.zitter = !this.zitter;
                }
                this.hadGround = false;
                return;
            }
            if (thePlayer.getOnGround()) {
                this.hadGround = true;
            }
            if (!this.hadGround) {
                return;
            }
            if (thePlayer.getOnGround()) {
                thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() + 0.2, thePlayer.getPosZ());
            }
            float vanillaSpeed = 2.0f;
            thePlayer.getCapabilities().setFlying(false);
            thePlayer.setMotionX(0.0);
            thePlayer.setMotionY(0.0);
            thePlayer.setMotionZ(0.0);
            if (mc.getGameSettings().getKeyBindJump().isKeyDown()) {
                thePlayer.setMotionY(thePlayer.getMotionY() + 2.0);
            }
            if (mc.getGameSettings().getKeyBindSneak().isKeyDown()) {
                thePlayer.setMotionY(thePlayer.getMotionY() - 2.0);
            }
            MovementUtils.strafe(2.0f);
            if (Mouse.isButtonDown((int)buttonIndex) && !this.doTeleport) {
                thePlayer.setPositionAndUpdate(thePlayer.getPosX(), thePlayer.getPosY() - 11.0, thePlayer.getPosZ());
                this.disableLogger = true;
                this.packets.forEach(packet -> mc.getNetHandler().addToSendQueue((IPacket)packet));
                this.freezeTimer.reset();
                this.freeze = true;
            }
            this.doTeleport = Mouse.isButtonDown((int)buttonIndex);
            return;
        }
        if (mc.getCurrentScreen() == null && Mouse.isButtonDown((int)buttonIndex) && this.delay <= 0) {
            this.endPos = this.objectPosition.getBlockPos();
            IIBlockState state = BlockUtils.getState(this.endPos);
            if (state.getBlock().getMaterial(state).equals(classProvider.getMaterialEnum(MaterialType.AIR))) {
                this.endPos = null;
                return;
            }
            ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73Position was set to \u00a78" + this.endPos.getX() + "\u00a73, \u00a78" + ((BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? (double)(this.endPos.getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY) + "\u00a73, \u00a78" + this.endPos.getZ());
            this.delay = 6;
        }
        if (this.delay > 0) {
            --this.delay;
        }
        if (this.endPos != null) {
            double endX = (double)this.endPos.getX() + 0.5;
            double endY = (BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? (double)(this.endPos.getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) + this.fixedY;
            double endZ = (double)this.endPos.getZ() + 0.5;
            switch (((String)this.modeValue.get()).toLowerCase()) {
                case "blink": {
                    if (!thePlayer.isSneaking()) break;
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
                    PathUtils.findBlinkPath(endX, endY, endZ).forEach(vector3d -> {
                        mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(vector3d.x, vector3d.y, vector3d.z, true));
                        thePlayer.setPosition(endX, endY, endZ);
                    });
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                    ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + endX + "\u00a73, \u00a78" + endY + "\u00a73, \u00a78" + endZ);
                    break;
                }
                case "flag": {
                    if (!thePlayer.isSneaking()) break;
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.STOP_SNEAKING));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 5.0, thePlayer.getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX() + 0.5, thePlayer.getPosY(), thePlayer.getPosZ() + 0.5, true));
                    MovementUtils.forward(0.04);
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketEntityAction(thePlayer, ICPacketEntityAction.WAction.START_SNEAKING));
                    ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + endX + "\u00a73, \u00a78" + endY + "\u00a73, \u00a78" + endZ);
                    break;
                }
                case "rewinside": {
                    thePlayer.setMotionY(0.1);
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY() + 0.6, thePlayer.getPosZ(), true));
                    if ((int)thePlayer.getPosX() == (int)endX && (int)thePlayer.getPosY() == (int)endY && (int)thePlayer.getPosZ() == (int)endZ) {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + endX + "\u00a73, \u00a78" + endY + "\u00a73, \u00a78" + endZ);
                        this.endPos = null;
                        break;
                    }
                    ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73Teleport try...");
                    break;
                }
                case "oldrewinside": {
                    thePlayer.setMotionY(0.1);
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(thePlayer.getPosX(), thePlayer.getPosY(), thePlayer.getPosZ(), true));
                    if ((int)thePlayer.getPosX() == (int)endX && (int)thePlayer.getPosY() == (int)endY && (int)thePlayer.getPosZ() == (int)endZ) {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + endX + "\u00a73, \u00a78" + endY + "\u00a73, \u00a78" + endZ);
                        this.endPos = null;
                    } else {
                        ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73Teleport try...");
                    }
                    MovementUtils.forward(0.04);
                    break;
                }
                case "minesucht": {
                    if (!thePlayer.isSneaking()) break;
                    mc.getNetHandler().addToSendQueue(classProvider.createCPacketPlayerPosition(endX, endY, endZ, true));
                    ClientUtils.displayChatMessage("\u00a77[\u00a78\u00a7lTeleport\u00a77] \u00a73You were teleported to \u00a78" + endX + "\u00a73, \u00a78" + endY + "\u00a73, \u00a78" + endZ);
                }
            }
        }
    }

    @EventTarget
    public void onRender3D(Render3DEvent event) {
        if (((String)this.modeValue.get()).equals("AAC3.5.0")) {
            return;
        }
        IEntityPlayerSP thePlayer = mc.getThePlayer();
        if (thePlayer == null) {
            return;
        }
        WVec3 entityLookVec = thePlayer.getLookVec();
        WVec3 lookVec = new WVec3(entityLookVec.getXCoord() * 300.0, entityLookVec.getYCoord() * 300.0, entityLookVec.getZCoord() * 300.0);
        WVec3 posVec = new WVec3(thePlayer.getPosX(), thePlayer.getPosY() + 1.62, thePlayer.getPosZ());
        this.objectPosition = mc.getTheWorld().rayTraceBlocks(posVec, posVec.add(lookVec), false, (Boolean)this.ignoreNoCollision.get(), false);
        if (this.objectPosition == null || this.objectPosition.getBlockPos() == null) {
            return;
        }
        WBlockPos belowBlockPos = new WBlockPos(this.objectPosition.getBlockPos().getX(), this.objectPosition.getBlockPos().getY() - 1, this.objectPosition.getBlockPos().getZ());
        this.fixedY = classProvider.isBlockFence(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? (mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((double)this.objectPosition.getBlockPos().getX() + 0.5 - thePlayer.getPosX(), (double)this.objectPosition.getBlockPos().getY() + 1.5 - thePlayer.getPosY(), (double)this.objectPosition.getBlockPos().getZ() + 0.5 - thePlayer.getPosZ())).isEmpty() ? 0.5 : 0.0) : (classProvider.isBlockFence(BlockUtils.getBlock(belowBlockPos)) ? (!mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((double)this.objectPosition.getBlockPos().getX() + 0.5 - thePlayer.getPosX(), (double)this.objectPosition.getBlockPos().getY() + 0.5 - thePlayer.getPosY(), (double)this.objectPosition.getBlockPos().getZ() + 0.5 - thePlayer.getPosZ())).isEmpty() || BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? 0.0 : -0.5) : (classProvider.isBlockSnow(BlockUtils.getBlock(this.objectPosition.getBlockPos())) ? 0.875 : 0.0));
        int x = this.objectPosition.getBlockPos().getX();
        double y = (BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()) == null ? (double)(this.objectPosition.getBlockPos().getY() + 1) : BlockUtils.getBlock(this.objectPosition.getBlockPos()).getCollisionBoundingBox(mc.getTheWorld(), this.objectPosition.getBlockPos(), BlockUtils.getBlock(this.objectPosition.getBlockPos()).getDefaultState()).getMaxY()) - 1.0 + this.fixedY;
        int z = this.objectPosition.getBlockPos().getZ();
        if (!classProvider.isBlockAir(BlockUtils.getBlock(this.objectPosition.getBlockPos()))) {
            IRenderManager renderManager = mc.getRenderManager();
            GL11.glBlendFunc((int)770, (int)771);
            GL11.glEnable((int)3042);
            GL11.glLineWidth((float)2.0f);
            GL11.glDisable((int)3553);
            GL11.glDisable((int)2929);
            GL11.glDepthMask((boolean)false);
            RenderUtils.glColor(((String)this.modeValue.get()).equalsIgnoreCase("minesucht") && (double)thePlayer.getPosition().getY() != y + 1.0 ? new Color(255, 0, 0, 90) : (!mc.getTheWorld().getCollidingBoundingBoxes(thePlayer, thePlayer.getEntityBoundingBox().offset((double)x + 0.5 - thePlayer.getPosX(), y + 1.0 - thePlayer.getPosY(), (double)z + 0.5 - thePlayer.getPosZ())).isEmpty() ? new Color(255, 0, 0, 90) : new Color(0, 255, 0, 90)));
            RenderUtils.drawFilledBox(classProvider.createAxisAlignedBB((double)x - renderManager.getRenderPosX(), y + 1.0 - renderManager.getRenderPosY(), (double)z - renderManager.getRenderPosZ(), (double)x - renderManager.getRenderPosX() + 1.0, y + 1.2 - renderManager.getRenderPosY(), (double)z - renderManager.getRenderPosZ() + 1.0));
            GL11.glEnable((int)3553);
            GL11.glEnable((int)2929);
            GL11.glDepthMask((boolean)true);
            GL11.glDisable((int)3042);
            RenderUtils.renderNameTag(Math.round(thePlayer.getDistance((double)x + 0.5, y + 1.0, (double)z + 0.5)) + "m", (double)x + 0.5, y + 1.7, (double)z + 0.5);
            GL11.glColor4f((float)1.0f, (float)1.0f, (float)1.0f, (float)1.0f);
        }
    }

    @EventTarget
    public void onMove(MoveEvent event) {
        if (((String)this.modeValue.get()).equalsIgnoreCase("aac3.5.0") && this.freeze) {
            event.zeroXZ();
        }
    }

    @EventTarget
    public void onPacket(PacketEvent event) {
        IPacket packet = event.getPacket();
        if (this.disableLogger) {
            return;
        }
        if (classProvider.isCPacketPlayer(packet)) {
            ICPacketPlayer packetPlayer = packet.asCPacketPlayer();
            switch (((String)this.modeValue.get()).toLowerCase()) {
                case "spoof": {
                    if (this.endPos == null) break;
                    packetPlayer.setX((double)this.endPos.getX() + 0.5);
                    packetPlayer.setY(this.endPos.getY() + 1);
                    packetPlayer.setZ((double)this.endPos.getZ() + 0.5);
                    mc.getThePlayer().setPosition((double)this.endPos.getX() + 0.5, this.endPos.getY() + 1, (double)this.endPos.getZ() + 0.5);
                    break;
                }
                case "aac3.5.0": {
                    if (!this.flyTimer.hasTimePassed(60)) {
                        return;
                    }
                    event.cancelEvent();
                    if (!classProvider.isCPacketPlayerPosition(packet) && !classProvider.isCPacketPlayerPosLook(packet)) {
                        return;
                    }
                    this.packets.add(packet);
                }
            }
        }
    }

    @Override
    public String getTag() {
        return (String)this.modeValue.get();
    }
}

